# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
	query: Query
	mutation: Mutation
}

type EditObject {
	actionType: ActionEnum!
	author: UserObject
	createAt: DateTime!
	file: FileObject!
	id: UUID!
}

type FileObject {
	extension: String
	fileType: FileTypeEnum!
	id: UUID!
	name: String!
	parent: FileObject
	project: ProjectObject!
}

type Mutation {
	addAuthor(authorId: UUID!, projectId: UUID!): Boolean!
	createFile(input: FileDto!): FileObject!
	createProject(input: ProjectDto!): ProjectObject!
	deleteFile(id: UUID!): Boolean!
	deleteProject(id: UUID!): Boolean!
	login(input: LoginDto!): String!
	register(input: RegisterDto!): String!
	removeAuthor(authorId: UUID!, projectId: UUID!): Boolean!
	updateFile(id: UUID!, input: UpdateFileDto!): FileObject!
	updateProject(input: UpdateProjectDto!): ProjectObject!
}

"A project"
type ProjectObject {
	"The authors of the project"
	authors: [UserObject!]!
	"The project description"
	description: String!
	"The edits of the project"
	edits: [EditObject!]!
	"The last edit of the project"
	files: [FileObject!]!
	"The project ID"
	id: UUID!
	"The last edit of the project"
	lastEdit: EditObject!
	"The project name"
	name: String!
}

type Query {
	dashboard: [ProjectObject!]!
	file(id: UUID!): FileObject!
	files: [FileObject!]!
	me: UserObject!
	project(id: UUID!): ProjectObject!
	projects: [ProjectObject!]!
	user(id: UUID!): UserObject!
	userByEmail(email: String!): UserObject!
	users: [UserObject!]!
}

"A user of the app"
type UserObject {
	"The email"
	email: String!
	"The user id, store as an UUID"
	id: UUID!
	"The list of the project the user is author in"
	projects: [ProjectObject!]!
	"The username"
	username: String!
}

enum ActionEnum {
	CREATE
	DELETE
	EDIT
}

enum FileTypeEnum {
	FOLDER
	IMAGE
	PDF
	TEX
}

"The DTO for creaating file"
input FileDto {
	extension: String
	folder: Boolean!
	"Name"
	name: String!
	parentId: UUID
	projectId: UUID!
}

"The DTO for login"
input LoginDto {
	"Email"
	email: String!
	"Password"
	password: String!
}

"The DTO for project"
input ProjectDto {
	"Description"
	description: String!
	"Name"
	name: String!
}

"The DTO for registration"
input RegisterDto {
	"Email (must not already be in the database)"
	email: String!
	"Password"
	password: String!
	"Username"
	username: String!
}

"The DTO for updating file"
input UpdateFileDto {
	"Name"
	name: String!
	parentId: UUID
}

"The DTO for project"
input UpdateProjectDto {
	"Description"
	description: String!
	"Id"
	id: UUID!
	"Name"
	name: String!
}


"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

scalar UUID
